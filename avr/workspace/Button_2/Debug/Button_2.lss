
Button_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c03  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000970  00000000  00000000  00000ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000401  00000000  00000000  00001837  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d3  00000000  00000000  0000213e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002311  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	53 d0       	rcall	.+166    	; 0x140 <main>
  9a:	8c c0       	rjmp	.+280    	; 0x1b4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Button_Init>:
﻿#include "button.h"

void Button_Init(Button *button, volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t pinNumber) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	1f 92       	push	r1
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	fc 01       	movw	r30, r24
  aa:	29 83       	std	Y+1, r18	; 0x01
	button -> ddr = ddr; // 생성한 버튼에 DDR값을 설정 (나의 경우 DDRE)
  ac:	71 83       	std	Z+1, r23	; 0x01
  ae:	60 83       	st	Z, r22
	button -> pin = pin; // 생성한 버튼에 PIN값을 설정 (나의 경우 PINE)
  b0:	53 83       	std	Z+3, r21	; 0x03
  b2:	42 83       	std	Z+2, r20	; 0x02
	button -> btnPin = pinNumber; // 몇번핀인지 설정 (각각 4, 6, 7)
  b4:	39 81       	ldd	r19, Y+1	; 0x01
  b6:	34 83       	std	Z+4, r19	; 0x04
	button -> prevState = RELEASED; // 1
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	85 83       	std	Z+5, r24	; 0x05
	*button -> ddr &= ~(1 << button -> btnPin); // DDRE의 4, 6, 7을 입력인 '0'으로 설정
  bc:	fb 01       	movw	r30, r22
  be:	20 81       	ld	r18, Z
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <Button_Init+0x2c>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	3a 95       	dec	r19
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <Button_Init+0x28>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	80 83       	st	Z, r24
}
  d4:	0f 90       	pop	r0
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <Button_getState>:

uint8_t Button_getState(Button *button) {
  dc:	fc 01       	movw	r30, r24
	uint8_t curState = *button->pin & (1 << button->btnPin); // 현재 button의 pin이 0이면 0, pin이 1이면 1 리턴
  de:	a2 81       	ldd	r26, Z+2	; 0x02
  e0:	b3 81       	ldd	r27, Z+3	; 0x03
  e2:	8c 91       	ld	r24, X
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	04 80       	ldd	r0, Z+4	; 0x04
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <Button_getState+0x14>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <Button_getState+0x10>
  f4:	28 23       	and	r18, r24
	if((curState == PUSHED) && (button->prevState == RELEASED)) {
  f6:	71 f4       	brne	.+28     	; 0x114 <Button_getState+0x38>
  f8:	85 81       	ldd	r24, Z+5	; 0x05
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	59 f4       	brne	.+22     	; 0x114 <Button_getState+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	30 e7       	ldi	r19, 0x70	; 112
 102:	92 e0       	ldi	r25, 0x02	; 2
 104:	21 50       	subi	r18, 0x01	; 1
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <Button_getState+0x28>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <Button_getState+0x32>
 10e:	00 00       	nop
		_delay_ms(50);
		button->prevState = PUSHED;
 110:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 112:	08 95       	ret
		} else if ((curState != PUSHED) && (button->prevState == PUSHED)) {
 114:	22 23       	and	r18, r18
 116:	81 f0       	breq	.+32     	; 0x138 <Button_getState+0x5c>
 118:	85 81       	ldd	r24, Z+5	; 0x05
 11a:	81 11       	cpse	r24, r1
 11c:	0f c0       	rjmp	.+30     	; 0x13c <Button_getState+0x60>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	30 e7       	ldi	r19, 0x70	; 112
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	21 50       	subi	r18, 0x01	; 1
 126:	30 40       	sbci	r19, 0x00	; 0
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <Button_getState+0x48>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <Button_getState+0x52>
 12e:	00 00       	nop
		_delay_ms(50);
		button->prevState = RELEASED;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	08 95       	ret
	}
	
	return NO_ACT;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret

00000140 <main>:
#include "button.h"

int main(void)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	62 97       	sbiw	r28, 0x12	; 18
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
    LED_DDR = 0xff;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	81 bb       	out	0x11, r24	; 17
	Button btnOn;
	Button btnOff;
	Button btnToggle;
	
	Button_Init(&btnOn, &BUTTON_DDR, &BUTTON_PIN, BUTTON_ON);
 158:	24 e0       	ldi	r18, 0x04	; 4
 15a:	41 e2       	ldi	r20, 0x21	; 33
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	62 e2       	ldi	r22, 0x22	; 34
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	9b df       	rcall	.-202    	; 0x9e <Button_Init>
	Button_Init(&btnOff, &BUTTON_DDR, &BUTTON_PIN, BUTTON_OFF);
 168:	26 e0       	ldi	r18, 0x06	; 6
 16a:	41 e2       	ldi	r20, 0x21	; 33
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	62 e2       	ldi	r22, 0x22	; 34
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	ce 01       	movw	r24, r28
 174:	07 96       	adiw	r24, 0x07	; 7
 176:	93 df       	rcall	.-218    	; 0x9e <Button_Init>
	Button_Init(&btnToggle, &BUTTON_DDR, &BUTTON_PIN, BUTTON_TOGGLE);
 178:	27 e0       	ldi	r18, 0x07	; 7
 17a:	41 e2       	ldi	r20, 0x21	; 33
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	62 e2       	ldi	r22, 0x22	; 34
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	ce 01       	movw	r24, r28
 184:	0d 96       	adiw	r24, 0x0d	; 13
 186:	8b df       	rcall	.-234    	; 0x9e <Button_Init>
	
    while (1) 
    {
		if (Button_getState(&btnOn) == ACT_RELEASED) {
 188:	ce 01       	movw	r24, r28
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	a7 df       	rcall	.-178    	; 0xdc <Button_getState>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	11 f4       	brne	.+4      	; 0x196 <main+0x56>
 192:	8f ef       	ldi	r24, 0xFF	; 255
			LED_PORT = 0xff;
 194:	82 bb       	out	0x12, r24	; 18
		}
		if (Button_getState(&btnOff) == ACT_RELEASED) {
 196:	ce 01       	movw	r24, r28
 198:	07 96       	adiw	r24, 0x07	; 7
 19a:	a0 df       	rcall	.-192    	; 0xdc <Button_getState>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	09 f4       	brne	.+2      	; 0x1a2 <main+0x62>
			LED_PORT = 0x00;
 1a0:	12 ba       	out	0x12, r1	; 18
		}
		if (Button_getState(&btnToggle) == ACT_RELEASED) {
 1a2:	ce 01       	movw	r24, r28
 1a4:	0d 96       	adiw	r24, 0x0d	; 13
 1a6:	9a df       	rcall	.-204    	; 0xdc <Button_getState>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	71 f7       	brne	.-36     	; 0x188 <main+0x48>
 1ac:	82 b3       	in	r24, 0x12	; 18
			LED_PORT ^= 0xff;
 1ae:	80 95       	com	r24
 1b0:	82 bb       	out	0x12, r24	; 18
 1b2:	ea cf       	rjmp	.-44     	; 0x188 <main+0x48>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
