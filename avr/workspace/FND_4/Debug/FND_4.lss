
FND_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000304  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093a  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000846  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000348  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b3  00000000  00000000  00001d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001f3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e0       	ldi	r30, 0x04	; 4
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e4 d0       	rcall	.+456    	; 0x28c <main>
  c4:	1d c1       	rjmp	.+570    	; 0x300 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FND_Display>:
#define FND_DATA_DDR DDRF
#define FND_SELECT_DDR DDRG
#define FND_DATA_PORT PORTF
#define FND_SELECT_PORT PORTG

void FND_Display(uint16_t data) {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2a 97       	sbiw	r28, 0x0a	; 10
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	ac 01       	movw	r20, r24
	static uint8_t position = 0; // Digit position 변수 설정 및 초기화
	uint8_t fndData[] = {
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	e0 e0       	ldi	r30, 0x00	; 0
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <FND_Display+0x20>
		0x27,
		0x7F,
		0x67
	};
	
	switch (position)
  f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	51 f1       	breq	.+84     	; 0x14c <FND_Display+0x84>
  f8:	38 f0       	brcs	.+14     	; 0x108 <FND_Display+0x40>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	09 f4       	brne	.+2      	; 0x100 <FND_Display+0x38>
  fe:	5b c0       	rjmp	.+182    	; 0x1b6 <FND_Display+0xee>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	09 f4       	brne	.+2      	; 0x106 <FND_Display+0x3e>
 104:	8b c0       	rjmp	.+278    	; 0x21c <FND_Display+0x154>
 106:	b3 c0       	rjmp	.+358    	; 0x26e <FND_Display+0x1a6>
	{
		case 0:
		// 첫번째 자리 FND 출력 -> 0번핀 LOW / 1, 2, 3 HIGH
		// 전위차로 인해 0일때 출력되고, 1일땐 출력 x
		FND_SELECT_PORT &= ~(1<<0); // digit 1 (천의자리) Low 0xxx
 108:	e5 e6       	ldi	r30, 0x65	; 101
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<1) | (1<<2) | (1<<3); // digit 1, 2, 3 High
 112:	80 81       	ld	r24, Z
 114:	8e 60       	ori	r24, 0x0E	; 14
 116:	80 83       	st	Z, r24
		
		// 입력된 데이터의 천의자리를 구해서 FND에 출력
		FND_DATA_PORT = fndData[data / 1000];
 118:	9a 01       	movw	r18, r20
 11a:	36 95       	lsr	r19
 11c:	27 95       	ror	r18
 11e:	36 95       	lsr	r19
 120:	27 95       	ror	r18
 122:	36 95       	lsr	r19
 124:	27 95       	ror	r18
 126:	a5 ec       	ldi	r26, 0xC5	; 197
 128:	b0 e2       	ldi	r27, 0x20	; 32
 12a:	db d0       	rcall	.+438    	; 0x2e2 <__umulhisi3>
 12c:	92 95       	swap	r25
 12e:	82 95       	swap	r24
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	89 27       	eor	r24, r25
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	89 27       	eor	r24, r25
 138:	e1 e0       	ldi	r30, 0x01	; 1
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	ec 0f       	add	r30, r28
 13e:	fd 1f       	adc	r31, r29
 140:	e8 0f       	add	r30, r24
 142:	f9 1f       	adc	r31, r25
 144:	80 81       	ld	r24, Z
 146:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		break;
 14a:	91 c0       	rjmp	.+290    	; 0x26e <FND_Display+0x1a6>
		
		case 1:
		// 두번째 자리 FND 출력 -> 1번핀 LOW / 0, 2, 3 HIGH
		FND_SELECT_PORT &= ~(1<<1); // digit 2 (백의자리) Low
 14c:	e5 e6       	ldi	r30, 0x65	; 101
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8d 7f       	andi	r24, 0xFD	; 253
 154:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<0) | (1<<2) | (1<<3); // digit 1, 3, 4 High
 156:	80 81       	ld	r24, Z
 158:	8d 60       	ori	r24, 0x0D	; 13
 15a:	80 83       	st	Z, r24
		
		// 입력된 데이터의 백의자리를 구해서 FND에 출력
		FND_DATA_PORT = fndData[data / 100 % 10];
 15c:	9a 01       	movw	r18, r20
 15e:	36 95       	lsr	r19
 160:	27 95       	ror	r18
 162:	36 95       	lsr	r19
 164:	27 95       	ror	r18
 166:	ab e7       	ldi	r26, 0x7B	; 123
 168:	b4 e1       	ldi	r27, 0x14	; 20
 16a:	bb d0       	rcall	.+374    	; 0x2e2 <__umulhisi3>
 16c:	ac 01       	movw	r20, r24
 16e:	56 95       	lsr	r21
 170:	47 95       	ror	r20
 172:	9a 01       	movw	r18, r20
 174:	ad ec       	ldi	r26, 0xCD	; 205
 176:	bc ec       	ldi	r27, 0xCC	; 204
 178:	b4 d0       	rcall	.+360    	; 0x2e2 <__umulhisi3>
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	9c 01       	movw	r18, r24
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	82 0f       	add	r24, r18
 19a:	93 1f       	adc	r25, r19
 19c:	9a 01       	movw	r18, r20
 19e:	28 1b       	sub	r18, r24
 1a0:	39 0b       	sbc	r19, r25
 1a2:	e1 e0       	ldi	r30, 0x01	; 1
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	e2 0f       	add	r30, r18
 1ac:	f3 1f       	adc	r31, r19
 1ae:	80 81       	ld	r24, Z
 1b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		break;
 1b4:	5c c0       	rjmp	.+184    	; 0x26e <FND_Display+0x1a6>
		
		case 2:
		// 세번째 자리 FND 출력 -> 3번핀 LOW / 1, 2, 4 HIGH
		FND_SELECT_PORT &= ~(1<<2); // digit 3 Low
 1b6:	e5 e6       	ldi	r30, 0x65	; 101
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8b 7f       	andi	r24, 0xFB	; 251
 1be:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<0) | (1<<1) | (1<<3); // digit 1, 2, 4 High
 1c0:	80 81       	ld	r24, Z
 1c2:	8b 60       	ori	r24, 0x0B	; 11
 1c4:	80 83       	st	Z, r24
		
		// 입력된 데이터의 십의자리를 구해서 FND에 출력
		FND_DATA_PORT = fndData[data / 10 % 10];
 1c6:	9a 01       	movw	r18, r20
 1c8:	ad ec       	ldi	r26, 0xCD	; 205
 1ca:	bc ec       	ldi	r27, 0xCC	; 204
 1cc:	8a d0       	rcall	.+276    	; 0x2e2 <__umulhisi3>
 1ce:	ac 01       	movw	r20, r24
 1d0:	56 95       	lsr	r21
 1d2:	47 95       	ror	r20
 1d4:	56 95       	lsr	r21
 1d6:	47 95       	ror	r20
 1d8:	56 95       	lsr	r21
 1da:	47 95       	ror	r20
 1dc:	9a 01       	movw	r18, r20
 1de:	81 d0       	rcall	.+258    	; 0x2e2 <__umulhisi3>
 1e0:	96 95       	lsr	r25
 1e2:	87 95       	ror	r24
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	9c 01       	movw	r18, r24
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	82 0f       	add	r24, r18
 200:	93 1f       	adc	r25, r19
 202:	9a 01       	movw	r18, r20
 204:	28 1b       	sub	r18, r24
 206:	39 0b       	sbc	r19, r25
 208:	e1 e0       	ldi	r30, 0x01	; 1
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ec 0f       	add	r30, r28
 20e:	fd 1f       	adc	r31, r29
 210:	e2 0f       	add	r30, r18
 212:	f3 1f       	adc	r31, r19
 214:	80 81       	ld	r24, Z
 216:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		break;
 21a:	29 c0       	rjmp	.+82     	; 0x26e <FND_Display+0x1a6>
		
		case 3:
		// 네번째 자리 FND 출력 -> 4번핀 LOW / 1, 2, 3 HIGH
		FND_SELECT_PORT &= ~(1<<3); // digit 4 Low
 21c:	e5 e6       	ldi	r30, 0x65	; 101
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	87 7f       	andi	r24, 0xF7	; 247
 224:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<0) | (1<<1) | (1<<2); // digit 1, 2, 3 High
 226:	80 81       	ld	r24, Z
 228:	87 60       	ori	r24, 0x07	; 7
		
		// 입력된 데이터의 일의자리를 구해서 FND에 출력
		FND_DATA_PORT = fndData[data % 10];
 22a:	80 83       	st	Z, r24
 22c:	9a 01       	movw	r18, r20
 22e:	ad ec       	ldi	r26, 0xCD	; 205
 230:	bc ec       	ldi	r27, 0xCC	; 204
 232:	57 d0       	rcall	.+174    	; 0x2e2 <__umulhisi3>
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	96 95       	lsr	r25
 23e:	87 95       	ror	r24
 240:	9c 01       	movw	r18, r24
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	82 0f       	add	r24, r18
 254:	93 1f       	adc	r25, r19
 256:	9a 01       	movw	r18, r20
 258:	28 1b       	sub	r18, r24
 25a:	39 0b       	sbc	r19, r25
 25c:	e1 e0       	ldi	r30, 0x01	; 1
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	ec 0f       	add	r30, r28
 262:	fd 1f       	adc	r31, r29
 264:	e2 0f       	add	r30, r18
 266:	f3 1f       	adc	r31, r19
 268:	80 81       	ld	r24, Z
 26a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		break;
	}
	
	position++; // 다음 자리로 이동하기 위해 포지션 증가
 26e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 272:	8f 5f       	subi	r24, 0xFF	; 255
	position = position % 4; // 4자리 출력후에 다시 첫번째로 돌아가기 위해 4로 나눈 나머지
 274:	83 70       	andi	r24, 0x03	; 3
 276:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 27a:	2a 96       	adiw	r28, 0x0a	; 10
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <main>:


int main(void)
{
	FND_DATA_DDR = 0xff;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	FND_SELECT_DDR = 0xff;
 292:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	FND_SELECT_PORT = 0x00;
 296:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	
	uint16_t count = 0;
	uint32_t timeTick = 0;
	uint32_t prevTime = 0;
 29a:	81 2c       	mov	r8, r1
 29c:	91 2c       	mov	r9, r1
 29e:	54 01       	movw	r10, r8
	FND_DATA_DDR = 0xff;
	FND_SELECT_DDR = 0xff;
	FND_SELECT_PORT = 0x00;
	
	uint16_t count = 0;
	uint32_t timeTick = 0;
 2a0:	c1 2c       	mov	r12, r1
 2a2:	d1 2c       	mov	r13, r1
 2a4:	76 01       	movw	r14, r12
{
	FND_DATA_DDR = 0xff;
	FND_SELECT_DDR = 0xff;
	FND_SELECT_PORT = 0x00;
	
	uint16_t count = 0;
 2a6:	c0 e0       	ldi	r28, 0x00	; 0
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t timeTick = 0;
	uint32_t prevTime = 0;
	
    while (1) 
    {
		FND_Display(count);
 2aa:	ce 01       	movw	r24, r28
 2ac:	0d df       	rcall	.-486    	; 0xc8 <FND_Display>
		if(timeTick - prevTime > 100) {
 2ae:	d7 01       	movw	r26, r14
 2b0:	c6 01       	movw	r24, r12
 2b2:	88 19       	sub	r24, r8
 2b4:	99 09       	sbc	r25, r9
 2b6:	aa 09       	sbc	r26, r10
 2b8:	bb 09       	sbc	r27, r11
 2ba:	85 36       	cpi	r24, 0x65	; 101
 2bc:	91 05       	cpc	r25, r1
 2be:	a1 05       	cpc	r26, r1
 2c0:	b1 05       	cpc	r27, r1
 2c2:	18 f0       	brcs	.+6      	; 0x2ca <main+0x3e>
			prevTime = timeTick;
			count++;
 2c4:	21 96       	adiw	r28, 0x01	; 1
	
    while (1) 
    {
		FND_Display(count);
		if(timeTick - prevTime > 100) {
			prevTime = timeTick;
 2c6:	46 01       	movw	r8, r12
 2c8:	57 01       	movw	r10, r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	8f e9       	ldi	r24, 0x9F	; 159
 2cc:	9f e0       	ldi	r25, 0x0F	; 15
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0x42>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x48>
 2d4:	00 00       	nop
			count++;
		}
		
		_delay_ms(1); // 0.001초
		timeTick++;
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
 2d8:	c9 1a       	sub	r12, r25
 2da:	d9 0a       	sbc	r13, r25
 2dc:	e9 0a       	sbc	r14, r25
 2de:	f9 0a       	sbc	r15, r25
    }
 2e0:	e4 cf       	rjmp	.-56     	; 0x2aa <main+0x1e>

000002e2 <__umulhisi3>:
 2e2:	a2 9f       	mul	r26, r18
 2e4:	b0 01       	movw	r22, r0
 2e6:	b3 9f       	mul	r27, r19
 2e8:	c0 01       	movw	r24, r0
 2ea:	a3 9f       	mul	r26, r19
 2ec:	70 0d       	add	r23, r0
 2ee:	81 1d       	adc	r24, r1
 2f0:	11 24       	eor	r1, r1
 2f2:	91 1d       	adc	r25, r1
 2f4:	b2 9f       	mul	r27, r18
 2f6:	70 0d       	add	r23, r0
 2f8:	81 1d       	adc	r24, r1
 2fa:	11 24       	eor	r1, r1
 2fc:	91 1d       	adc	r25, r1
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
