
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a0  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000850  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001794  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000034  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	36 c0       	rjmp	.+108    	; 0x108 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include "uart0.h"

int main(void)
{   
	UART0_Init();
  9e:	10 d0       	rcall	.+32     	; 0xc0 <UART0_Init>
	LED_DDR = 0xff;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
	char data;
	
    while (1) 
    {	
		data = UART0_Receive();
  a2:	81 bb       	out	0x11, r24	; 17
  a4:	24 d0       	rcall	.+72     	; 0xee <UART0_Receive>
  a6:	c8 2f       	mov	r28, r24
		if (data == 'a') {
  a8:	81 36       	cpi	r24, 0x61	; 97
			LED_ON();
  aa:	21 f4       	brne	.+8      	; 0xb4 <main+0x16>
			UART0_Transmit(data);
  ac:	25 d0       	rcall	.+74     	; 0xf8 <LED_ON>
  ae:	8c 2f       	mov	r24, r28
  b0:	1a d0       	rcall	.+52     	; 0xe6 <UART0_Transmit>
		} else if (data == 'b') {
  b2:	f8 cf       	rjmp	.-16     	; 0xa4 <main+0x6>
			LED_OFF();
  b4:	82 36       	cpi	r24, 0x62	; 98
  b6:	b1 f7       	brne	.-20     	; 0xa4 <main+0x6>
			UART0_Transmit(data);
  b8:	23 d0       	rcall	.+70     	; 0x100 <LED_OFF>
  ba:	8c 2f       	mov	r24, r28
  bc:	14 d0       	rcall	.+40     	; 0xe6 <UART0_Transmit>
  be:	f2 cf       	rjmp	.-28     	; 0xa4 <main+0x6>

000000c0 <UART0_Init>:

// 9600bps 설정
// 2배속 모드
// 비동기, 8비트 데이터, 패리티비트x, 스탑비트 1bit
void UART0_Init() {
	UBRR0H = 0;
  c0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;
  c4:	8f ec       	ldi	r24, 0xCF	; 207
  c6:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A |= (1<<U2X0);  // 2배속
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06;       // 어차피 1, 1이라 써도되고 안써도 됨 => 비동기, 8비트 데이터, 패리티비트x, 스탑비트 1bit
  ce:	e5 e9       	ldi	r30, 0x95	; 149
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
	
	UCSR0B |= (1<<RXEN0); // 수신 가능
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<TXEN0);  // 송신 가능
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	08 95       	ret

000000e6 <UART0_Transmit>:
}
void UART0_Transmit(char data) {
	while(!(UCSR0A & (1<<UDRE0))); // 송신 가능한지 체크 -> UDR 비어있는지 -> 받을 준비가 되어있으면 1, 준비가 안되어 있으면 0
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <UART0_Transmit>
	UDR0 = data;
  ea:	8c b9       	out	0x0c, r24	; 12
  ec:	08 95       	ret

000000ee <UART0_Receive>:
}
unsigned UART0_Receive() {
	while(!(UCSR0A & (1<<RXC0))); // 수신 대기
  ee:	5f 9b       	sbis	0x0b, 7	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <UART0_Receive>
	
	return UDR0; // 수신이 끝나면 UDR0으로 리턴
  f2:	8c b1       	in	r24, 0x0c	; 12
}
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret

000000f8 <LED_ON>:

void LED_ON() {
	LED_PORT |= (1 << LED_PIN);
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	08 95       	ret

00000100 <LED_OFF>:
}
void LED_OFF() {
	LED_PORT &= ~(1 << LED_PIN);
 100:	82 b3       	in	r24, 0x12	; 18
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	82 bb       	out	0x12, r24	; 18
 106:	08 95       	ret

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
